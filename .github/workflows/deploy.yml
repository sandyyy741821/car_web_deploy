name: CICD_FLOW

on:
  push:
    branches:
      - main  

jobs:
  sonar_scan:
    runs-on: ubuntu-latest
   
    steps:
   
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Add SSH Key
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa    

    - name: Connect to EC2 & Start SonarQube
      run: |
        ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ec2-user@${{ secrets.SONAR_HOST_URL }} << 'EOF'
        cd /opt/sonarqube/bin/linux-x86-64
        ./sonar.sh start
        EOF
      env:
        SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}

    - name: Wait for 60 seconds
      run: sleep 60      

    - name: SonarQube Scan
      uses: SonarSource/sonarqube-scan-action@v4
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_HOST_URL: http://${{ secrets.SONAR_HOST_URL }}:9000  
       
    - name: Wait for 30 seconds
      run: sleep 30
       
    - name: Fetch SonarQube Issues
      run: |
        curl -u ${{ secrets.SONAR_TOKEN }}: \
        "http://${{ secrets.SONAR_HOST_URL }}:9000/api/issues/search?componentKeys=CICD&types=BUG,VULNERABILITY,CODE_SMELL" \
        | jq '.' > sonarqube_issues.json

    - name: Upload SonarQube Report
      uses: actions/upload-artifact@v4
      with:
        name: sonarqube-report
        path: sonarqube_issues.json        

    - name: Connect to EC2 & Stop SonarQube
      run: |
        ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ec2-user@${{ secrets.SONAR_HOST_URL }} << 'EOF'
        cd /opt/sonarqube-10.6.0.92116/bin/linux-x86-64
        ./sonar.sh stop
        EOF
      env:
        SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}   

  deploy:
    runs-on: ubuntu-latest
    needs: [sonar_scan]  
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Deploy to S3
        run: aws s3 sync ./website s3://${{ secrets.S3_BUCKET_NAME }} --delete
